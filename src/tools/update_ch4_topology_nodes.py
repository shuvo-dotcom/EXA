import json
import os
import copy

"""Deterministic rewrite of methane heating topology node keys.

Steps:
1. Load methane topology JSON.
2. Rename every existing short node key (e.g. AT00) to B-Methane_Heat-<mapped>_HCH4.
3. Handle exceptions where target code differs from existing (e.g. UK00->UKNI, LU00->LUG1).
4. Add any extra region-split nodes listed but absent (template clone from first key in country).
5. Remove any lingering original short keys.
6. Persist file and print summary.
"""

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
FILE_PATH = os.path.join(
    SCRIPT_DIR,
    'src', 'EMIL', 'demand', 'demand_dictionaries', 'project_nodal_split',
    'TYNDP_2026_Scenarios_ch4hhp_topology.json'
)

# Desired final node list (canonical targets)
CANONICAL_NODES = [
    'AT00','BE00','BG00','CY00','CZ00','DE00','DKE1','DKW1','EE00','ES00','FI00','FR00',
    'GR00','GR03','HR00','HU00','IE00',
    # Italy regional splits
    'ITCA','ITCN','ITCS','ITN1','ITS1','ITSA','ITSI',
    'LT00','LUG1','LV00','MD00','MK00','MT00','NL00',
    # Norway splits
    'NOM1','NON1','NOS1','NOS2','NOS3',
    'PL00','PT00','RO00','RS00',
    # Sweden splits
    'SE01','SE02','SE03','SE04',
    'SI00','SK00','UKNI'
]

# Mapping from existing short key to desired canonical code when they differ
EXCEPTION_MAP = {
    'UK00': 'UKNI',  # Provided list expects UKNI instead of UK00
    'LU00': 'LUG1',  # Luxembourg mapping
}

ZONE = 'Zone 1'

def load_json(path: str):
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_json(path: str, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2)

def main():
    print(f"Opening methane topology: {FILE_PATH}")
    data = load_json(FILE_PATH)

    renamed = 0
    added = 0
    removed = 0

    # First pass: rename existing short keys
    for country, cdata in data.items():
        if ZONE not in cdata:
            continue
        zone_dict = cdata[ZONE]
        original_keys = list(zone_dict.keys())
        for k in original_keys:
            if k.startswith('B-Methane_Heat-'):
                continue  # already transformed
            target_base = EXCEPTION_MAP.get(k, k)
            new_key = f'B-Methane_Heat-{target_base}_HCH4'
            if new_key == k:
                # Unusual, but skip to avoid reinsert
                continue
            # Move value
            zone_dict[new_key] = zone_dict.pop(k)
            renamed += 1

    # Second pass: ensure all canonical nodes exist; add missing via template cloning
    for country, cdata in data.items():
        if ZONE not in cdata:
            continue
        zone_dict = cdata[ZONE]
        # Determine template (first existing methane node if possible else any)
        template_key = None
        for key in zone_dict.keys():
            if key.startswith('B-Methane_Heat-'):
                template_key = key
                break
        if not template_key:
            # fallback to any key
            template_key = next(iter(zone_dict.keys()), None)
        template_value = zone_dict.get(template_key)
        if not template_value:
            continue

        for base in CANONICAL_NODES:
            if base[:2] != country:
                continue
            full_key = f'B-Methane_Heat-{base}_HCH4'
            if full_key not in zone_dict:
                zone_dict[full_key] = copy.deepcopy(template_value)
                added += 1

    # Third pass: remove any lingering short keys (should not remain) or mismatched raw codes
    for country, cdata in data.items():
        if ZONE not in cdata:
            continue
        zone_dict = cdata[ZONE]
        to_delete = [k for k in zone_dict.keys() if '-' not in k]
        for k in to_delete:
            del zone_dict[k]
            removed += 1

    save_json(FILE_PATH, data)

    print("Summary:")
    print(f"  Renamed existing: {renamed}")
    print(f"  Added splits: {added}")
    print(f"  Removed leftover short keys: {removed}")

    # Spot check a few countries
    for cc in ['AT','DE','SE','UK','LU','NO','IT']:
        if cc in data and ZONE in data[cc]:
            keys = [k for k in data[cc][ZONE].keys() if k.startswith('B-Methane_Heat-')]
            print(f"{cc} methane keys: {keys[:10]}")

if __name__ == '__main__':
    main()

    # Optional: replace original file with transformed version generated by rewrite script if present
    transformed_path = os.path.join(
        SCRIPT_DIR,
        'src', 'demand', 'demand_dictionaries', 'project_nodal_split',
        'TYNDP_2026_Scenarios_ch4hhp_topology_transformed.json'
    )
    if os.path.exists(transformed_path):
        try:
            with open(transformed_path, 'r', encoding='utf-8') as src, open(FILE_PATH, 'w', encoding='utf-8') as dst:
                dst.write(src.read())
            print('Replaced original methane topology file with transformed version.')
        except Exception as e:
            print(f'Could not replace original file: {e}')
