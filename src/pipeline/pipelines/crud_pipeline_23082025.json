{
    "tasks": [
                {
                    "id": "choose_source_class_group",
                    "description": "Determine the class group from user input.",
                    "function": "get_plexos_table_and_llm_pick_item_id",
                    "inputs": {
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "item_type_for_get_item_id": "t_class_group",
                        "item_id_column": "class_group_id",
                        "item_name_column": "name",
                        "extra_notes": "Class Group are at energy carrier level. It is not concerned with the property being modified", 
                        "model": "gpt-5-mini"
                    
                    },
                    "outputs": {
                        "class_group_id": "result.id",
                        "class_group_name": "result.name"
                    }
                },

                {
                    "id": "get_active_classes",
                    "description": "Retrieve all active classes in the PLEXOS model.",
                    "function": "get_active_classes",
                    "inputs": {
                        "db": "db"
                    },
                    "outputs": {
                        "active_classes": "result"
                    }
                },

                {
                    "id": "choose_source_class",
                    "description": "Determine the primary class for the operation.",
                    "function": "get_plexos_table_and_llm_pick_item_id",
                    "inputs": {
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "item_type_for_get_item_id": "t_class",
                        "grp": "tasks.choose_source_class_group.outputs.class_group_id",
                        "strategy_action": "tasks.task_context.outputs.strategy_action",
                        "item_id_column": "class_id",
                        "item_name_column": "name",
                        "all_class_objects": "tasks.get_active_classes.outputs.active_classes",
                        "model": "gpt-5-mini"
                    },
                    "outputs": {
                        "class_id": "result.id",
                        "class_name": "result.name"
                    }
                },

                {
                    "id": "read_all_categories_for_source_class",
                    "description": "read all categories for the determined class.",
                    "function": "get_categories",
                    "inputs": {
                        "db": "db",
                        "nClassId": "tasks.choose_source_class.outputs.class_id"
                    },
                    "outputs": {
                        "raw_categories_list": "result"
                                }
                },

                {
                "id": "choose_source_category",
                "description": "LLM selects an existing category or suggests a new one.",
                "function": "choose_source_item",
                "inputs": {
                            "user_input": "tasks.task_context.outputs.user_input",
                            "context": "dag_context.context",
                            "action": "tasks.task_context.outputs.strategy_action",
                            "item_set": "tasks.read_all_categories_for_source_class.outputs.raw_categories_list",
                            "item_type": "Category",
                            
                            "model": "gpt-5-mini"
                            },
                "outputs": {
                            "final_category_name": "result.selected_name",
                            "category_selection_type": "result.selection_type",
                            "reasoning": "result.reasoning"
                            },
                "type": "LLM API Call"
                },

                {
                    "id": "execute_category_action",
                    "description": "Perform a CRUD operation at the Category level.",
                    "condition": "tasks.task_context.outputs.target_level == 'category' OR tasks.choose_source_category.outputs.category_selection_type == 'new_item'",
                    "function": "perform_crud_operation",
                    "inputs": {
                            "db": "db",
                            "user_input": "tasks.task_context.outputs.user_input",
                            "context": "dag_context.context",
                            "level": "category",
                            "action": "tasks.task_context.outputs.action",
                            "action_details": "tasks.task_context.outputs.action_details",
                            "identifiers": {
                                "class_id": "tasks.choose_source_class.outputs.class_id",
                                "category_name": "tasks.choose_source_category.outputs.final_category_name", 
                                "new_category": "tasks.choose_source_category.outputs.category_selection_type",
                                "sub_level": "category", 
                                "previous_tasks": "summarised_outputs"
                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },
                
                {
                "id": "read_all_objects_in_source_category",
                "description": "read all objects for the determined category. Returns list_of_objects and the original_item for pipeline execution.",
                "type": "plexos_api_call",
                "function": "get_objects_in_category",
                "condition": "tasks.choose_source_category.outputs.category_selection_type != 'undertermined'",
                "inputs": {
                            "db": "db",
                            "nClassId": "tasks.choose_source_class.outputs.class_id",
                            "strCategory": "tasks.choose_source_category.outputs.final_category_name"
                            },
                "outputs": {
                            "list_of_objects": "result"
                            }
                },

                {"id": "read_all_objects_in_source_class",
                "description": "read all objects for the determined class. Returns list_of_objects and the original_item for pipeline execution.",
                "type": "plexos_api_call",
                "condition": "tasks.choose_source_category.outputs.category_selection_type == 'undertermined'",
                "function": "get_objects_in_class", 
                "inputs": {
                            "db": "db",
                            "nClassId": "tasks.choose_source_class.outputs.class_id"
                            },
                "outputs": {
                            "list_of_objects": "result"
                            }
                },

                {
                "id": "choose_objects",
                "description": "LLM determines original object for pipeline execution.",
                "function": "choose_object_subset",
                "type": "LLM API Call",
                "inputs": {
                            "user_input": "tasks.task_context.outputs.user_input",
                            "object_set": "tasks.read_all_objects_in_source_category.outputs.list_of_objects",
                            "object_type": "tasks.choose_source_class.outputs.class_name",
                            "selected_level": "tasks.task_context.outputs.target_level",
                            "operation_type": "tasks.task_context.outputs.strategy_action",
                            "model": "gpt-5-mini",
                            
                            "all_class_objects": "None"
                            },
                "outputs": {
                            "list_of_objects": "result.list_of_objects",
                            "selection_type": "result.selection_type",
                            "reasoning": "result.reasoning"
                            }
                },

                {
                    "id": "execute_object_action",
                    "description": "Perform a CRUD operation at the Object level.",
                    "condition": "tasks.task_context.outputs.target_level == 'object'",
                    "function": "perform_crud_operation",
                    "inputs": {
                        "db": "db",
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "level": "object",
                        "action": "tasks.task_context.outputs.strategy_action",
                        "action_details": "tasks.task_context.outputs.action_details",
                        "identifiers": {
                            "class_id": "tasks.choose_source_class.outputs.class_id",
                            "category_name": "tasks.choose_source_category.outputs.final_category_name",
                            "object_name": "tasks.choose_objects.outputs.list_of_objects",
                            "previous_tasks": "summarised_outputs"

                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },

                {
                "id": "read_all_object_collections",
                "description": "read all collections for the object", 
                "type": "plexos_api_call",
                "function": "get_collections",
                "inputs": {
                            "db": "db",
                            "object_name": "tasks.choose_objects.outputs.object_name",
                            "class_name": "tasks.choose_source_class.outputs.class_name",
                            "class_id": "tasks.choose_source_class.outputs.class_id",
                            "list_of_objects": "tasks.choose_objects.outputs.list_of_objects",
                            "object_list_id": "tasks.choose_objects.outputs.object_id"
                            },
                "outputs": {
                            "collections_list": "result"
                            }
                },         

                {
                "id": "choose_collections",
                "description": "Choose the specific membership (collection) for the operation.",
                "condition": "tasks.task_context.outputs.target_level == 'membership' OR tasks.task_context.outputs.target_level == 'property'",
                "function": "choose_collection_subset",
                "inputs": {
                    "user_input": "tasks.task_context.outputs.user_input", 
                    "collection_set": "tasks.read_all_object_collections.outputs.collections_list",
                    "collection_type": "tasks.task_context.outputs.target_level",
                    "selected_level": "tasks.task_context.outputs.target_level",
                    "operation_type": "tasks.task_context.outputs.strategy_action",
                    "object_selection_type": "tasks.choose_objects.outputs.selection_type",
                        "class_name": "tasks.choose_source_class.outputs.class_name",
                        "class_id": "tasks.choose_source_class.outputs.class_id",
                    
                    "model": "gpt-5-mini"
                    },
                "outputs": { 
                            "list_of_collections": "result.list_of_collections",
                            "collection_data": "result.collection_data",
                            "reasoning": "result.reasoning"
                            },
                "type": "Choose"
                },

                {
                    "id": "choose_memberships",
                    "description": "LLM determines the membership for the operation.",
                    "condition": "tasks.task_context.outputs.target_level == 'membership'",
                    "function": "get_parent_and_child_memberships",
                    "inputs": {
                        "db": "db",
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "collection_id": "tasks.choose_collections.outputs.list_of_collections",
                        "object_name": "tasks.choose_objects.outputs.list_of_objects",
                        
                        "object_class_id": "tasks.choose_source_class.outputs.class_id"
                    }, 
                    "outputs": {
                        "parent_membership": "result.parent_membership",
                        "child_membership": "result.child_membership",
                        "reasoning": "result.reasoning"
                    }
                },
                            
                {
                    "id": "execute_membership_action",
                    "description": "Perform a CRUD operation at the Membership level.",
                    "condition": "tasks.task_context.outputs.target_level == 'membership'",
                    "function": "perform_crud_operation",
                    "inputs": {
                        "db": "db",
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "level": "tasks.task_context.outputs.target_level",
                        "action": "tasks.task_context.outputs.strategy_action",
                        "action_details": "tasks.task_context.outputs.strategy_action",
                        "identifiers": { 
                            "collection_id": "tasks.choose_collections.outputs.list_of_collections",
                            "parent_membership": "tasks.choose_memberships.outputs.parent_membership",
                            "child_membership": "tasks.choose_memberships.outputs.child_membership",
                            "previous_tasks": "summarised_outputs"
                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },

                {
                "id": "get_membership_properties",
                "description": "Get properties of the original object from the membership.",
                "function": "get_properties_table_to_dict",
                "type": "plexos_api_call",
                "inputs": {
                            "db": "db",
                            "collection_id_list": "tasks.choose_collections.outputs.list_of_collections",
                            "all_collections_data": "tasks.read_all_object_collections.outputs.collections_list",         
                            "target_level": "tasks.task_context.outputs.target_level",
                            "strategy_action": "tasks.task_context.outputs.strategy_action",
                            "user_input": "tasks.task_context.outputs.user_input",
                            "context": "dag_context.context"
                            },
                "outputs": {
                            "source_properties_list": "result"
                            }  
                },

                {
                    "id": "choose_properties",
                    "description": "Choose the specific property for the operation.",
                    "function": "choose_property_subset",
                    "inputs": {
                        "user_input": "tasks.task_context.outputs.user_input", 
                        "property_set": "tasks.get_membership_properties.outputs.source_properties_list",
                        "selected_level": "tasks.task_context.outputs.target_level",
                        "operation_type": "tasks.task_context.outputs.strategy_action",
                        "property_type": "initial_context.static_context_strings.entity_selection_context",
                        
                        "model": "gpt-5-mini"
                        },
                    "outputs": { 
                                "chosen_properties": "result.selected_properties",
                                "reasoning": "result.reasoning"
                                },
                    "type": "Choose"
                },

                {
                    "id": "update_property_attributes",
                    "description": "Update the attributes of the chosen property.",
                    "condition": "tasks.task_context.outputs.target_level == 'property'",
                    "function": "update_properties_with_grouped_llm",
                    "inputs": {
                        "db": "db",
                        "collection_properties": "tasks.get_membership_properties.outputs.source_properties_list",
                        "collection_list": "tasks.read_all_object_collections.outputs.collections_list",
                        "original_object_name": "tasks.choose_objects.outputs.list_of_objects",
                        "new_object_name": "tasks.choose_objects.outputs.list_of_objects",
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "collection_id": "tasks.choose_collections.outputs.list_of_collections",
                        "collection_name": "tasks.choose_collections.outputs.collection_data",
                        "strParent": "tasks.choose_memberships.outputs.parent_membership",
                        "strChild": "tasks.choose_memberships.outputs.child_membership",
                        "target_level_key": "tasks.task_context.outputs.target_level",
                        "strategy_action": "tasks.task_context.outputs.strategy_action",
                        "model": "gpt-5-mini"
                    },
                    "outputs": {
                        "status": "result.status",
                        "property_attributes": "result.property_attributes"
                    },
                    "type": "Update"
                },

                {
                    "id": "execute_property_action",
                    "description": "Perform a CRUD operation at the Property level.",
                    "condition": "tasks.task_context.outputs.target_level == 'property'",
                    "function": "perform_crud_operation",
                    "inputs": {
                                "db": "db", 
                                "user_input": "tasks.task_context.outputs.user_input",
                                "context": "dag_context.context",
                                "level": "tasks.task_context.outputs.target_level", 
                                "action": "tasks.task_context.outputs.strategy_action", 
                                "action_details": "tasks.task_context.outputs.action_details",
                                "identifiers": { 
                                                    "list_of_properties": "tasks.get_membership_properties.outputs.source_properties_list",
                                                    "chosen_properties": "tasks.choose_property.outputs.chosen_properties",     
                                                    "collection_id": "tasks.choose_memberships.outputs.list_of_collections",
                                                    "list_of_collections": "tasks.read_all_object_collections.outputs.collections_list",
                                                    
                                                    "property_attributes": "tasks.update_property_attributes.outputs.property_attributes"
                                                    }
                        },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },

                {
                    "id": "choose_attributes",
                    "description": "LLM determines the attributes for the chosen property.",
                    "condition": "tasks.task_context.outputs.target_level == 'attribute'",
                    "function": "choose_attributes_subset",
                    "inputs": {
                        "user_input": "tasks.task_context.outputs.user_input",
                        "context": "dag_context.context",
                        "property_list": "tasks.get_membership_properties.outputs.source_properties_list",
                        
                        "chosen_properties": "tasks.choose_properties.outputs.chosen_properties"

                    },
                    "outputs": {
                        "chosen_attributes": "result",
                        "reasoning": "result.reasoning"
                    },
                    "type": "Choose"
                }

            ]
}
