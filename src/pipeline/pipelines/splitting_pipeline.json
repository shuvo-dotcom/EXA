{
    "pipeline_name": "PLEXOS Object Splitting Pipeline",
    "description": "Splits a single PLEXOS object into multiple new objects with distributed properties and copied memberships.",
    "initial_context": {
        "user_input": "Split the 'Offshore Wind - North Sea' generator into two units: 'Dogger Bank' (250MW) and 'Hornsea' (250MW). Keep them in the 'Offshore Wind' category.",
        "plexos_model_location": "C:\\Users\\ENTSOE\\Tera-joule\\Projects\\Sectoral Model\\TJ_Sectorial_Model_V21.xml",
        "strategy_action": "split",
        "split_config": {
            "property_distribution": {
                "capacity": "proportional",
                "default": "copy"
            },
            "membership_handling": "copy_all",
            "delete_source_object": true
        },
        "static_context_strings": {
            "default_llm_context": "You are an expert in PLEXOS modeling. You are assisting a user in splitting a single asset into multiple smaller assets.",
            "get_class_context": "You are selecting a PLEXOS class based on the user's request. Identify the class of the object to be split.",
            "get_category_context": "You are selecting a PLEXOS category. Identify the category that contains the object the user wants to split.",
            "split_plan_context": "Create a plan to split a single object into multiple new objects. The user has specified the names and property overrides for the new objects. Formulate this into a structured JSON array.",
            "property_distribution_context": "When splitting properties from a source object's memberships, capacity-related values should be divided proportionally according to the split plan, while most other operational parameters should be copied directly to each new object."
        }
    },
    "tasks": [
        {
            "id": "read_plexos_model",
            "description": "Read the PLEXOS model into memory.",
            "function": "load_model",
            "inputs": { "model_location": "initial_context.plexos_model_location" },
            "outputs": { "db_connection": "result" },
            "type": "Read"
        },
        {
            "id": "choose_source_class_group",
            "description": "Choose the source object's class group.",
            "function": "get_plexos_table_and_llm_pick_item_id",
            "inputs": {
                "user_input": "initial_context.user_input",
                "llm_context": "initial_context.static_context_strings.default_llm_context",
                "item_type_for_get_item_id": "t_class_group"
            },
            "outputs": { "class_group_id": "result.id" },
            "type": "Choose"
        },
        {
            "id": "choose_source_class",
            "description": "Choose the source object's class.",
            "function": "get_plexos_table_and_llm_pick_item_id",
            "inputs": {
                "user_input": "initial_context.user_input",
                "llm_context": "initial_context.static_context_strings.get_class_context",
                "item_type_for_get_item_id": "t_class",
                "get_item_id_filters": { "grp": "tasks.choose_source_class_group.outputs.class_group_id" }
            },
            "outputs": {
                "class_id": "result.id",
                "class_name": "result.name"
            },
            "type": "Choose"
        },
        {
            "id": "choose_source_category",
            "description": "Choose the category containing the object to split.",
            "function": "choose_item",
            "inputs": {
                "user_input": "initial_context.user_input",
                "item_type": "Category",
                "item_set_function": "get_plexos_categories_by_class",
                "inputs_for_item_set_function": {
                    "db": "tasks.read_plexos_model.outputs.db_connection",
                    "nClassId": "tasks.choose_source_class.outputs.class_id"
                },
                "llm_context": "initial_context.static_context_strings.get_category_context"
            },
            "outputs": { "category_name": "result.selected_name" },
            "type": "Choose"
        },
        {
            "id": "read_objects_in_category",
            "description": "Read all objects within the chosen category.",
            "function": "get_plexos_objects",
            "inputs": {
                "db": "tasks.read_plexos_model.outputs.db_connection",
                "nClassId": "tasks.choose_source_class.outputs.class_id",
                "strCategory": "tasks.choose_source_category.outputs.category_name"
            },
            "outputs": { "candidate_objects": "result" },
            "type": "Read"
        },
        {
            "id": "select_object_to_split",
            "description": "Choose the specific object to split from the category list.",
            "function": "choose_single_object",
            "inputs": {
                "user_input": "initial_context.user_input",
                "object_set": "tasks.read_objects_in_category.outputs.candidate_objects",
                "operation_type": "split"
            },
            "outputs": { "source_object_name": "result.selected_object_name" },
            "type": "Choose"
        },
        {
            "id": "get_source_object_details",
            "description": "Read all properties and memberships for the single source object.",
            "function": "get_all_object_properties_with_collections",
            "inputs": {
                "db": "tasks.read_plexos_model.outputs.db_connection",
                "object_name": "tasks.select_object_to_split.outputs.source_object_name",
                "class_id": "tasks.choose_source_class.outputs.class_id"
            },
            "outputs": { "source_details": "result" },
            "type": "Read"
        },
        {
            "id": "generate_split_plan",
            "description": "Create a detailed plan for the new objects based on user input and source object data.",
            "function": "create_split_plan",
            "inputs": {
                "user_input": "initial_context.user_input",
                "source_object_details": "tasks.get_source_object_details.outputs.source_details",
                "llm_context": "initial_context.static_context_strings.split_plan_context"
            },
            "outputs": { "new_objects_plan": "result.plan" },
            "type": "Create"
        },
        {
            "id": "execute_split_plan",
            "description": "Loop over the plan to create and configure each new split object.",
            "type": "Loop",
            "iterate_on": "tasks.generate_split_plan.outputs.new_objects_plan",
            "loop_variable_name": "new_object_spec",
            "tasks": [
                {
                    "id": "create_new_object",
                    "description": "Create the new object in PLEXOS.",
                    "function": "add_object",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "strName": "loop.new_object_spec.name",
                        "nClassId": "tasks.choose_source_class.outputs.class_id",
                        "strCategory": "tasks.choose_source_category.outputs.category_name",
                        "strDescription": "loop.new_object_spec.description"
                    },
                    "outputs": { "new_object_id": "result.id" },
                    "type": "Create"
                },
                {
                    "id": "create_new_memberships",
                    "description": "Copy all memberships from the source object to the new object.",
                    "function": "copy_object_memberships",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "source_memberships": "tasks.get_source_object_details.outputs.source_details.memberships",
                        "new_object_id": "tasks.create_new_object.outputs.new_object_id",
                        "new_object_name": "loop.new_object_spec.name"
                    },
                    "outputs": { "created_memberships": "result" },
                    "type": "Create"
                },
                {
                    "id": "distribute_properties",
                    "description": "Distribute properties from the source object to the new object according to the split plan.",
                    "function": "distribute_properties_to_new_object",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "source_properties": "tasks.get_source_object_details.outputs.source_details.properties",
                        "new_object_memberships": "tasks.create_new_memberships.outputs.created_memberships",
                        "distribution_rules": "initial_context.split_config.property_distribution",
                        "split_spec": "loop.new_object_spec"
                    },
                    "type": "Update"
                }
            ]
        },
        {
            "id": "delete_source_object",
            "description": "Delete the original source object after a successful split.",
            "condition": "initial_context.split_config.delete_source_object == true",
            "function": "delete_object",
            "inputs": {
                "db": "tasks.read_plexos_model.outputs.db_connection",
                "object_name": "tasks.select_object_to_split.outputs.source_object_name",
                "class_id": "tasks.choose_source_class.outputs.class_id"
            },
            "type": "Delete"
        },
        {
            "id": "close_plexos_database",
            "description": "Close the PLEXOS database connection.",
            "function": "close_model",
            "inputs": { "db": "tasks.read_plexos_model.outputs.db_connection" },
            "type": "Update"
        }
    ]
}
