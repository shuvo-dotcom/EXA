{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the nodes dictionary. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipelines",
    "search",
    "hydrogen",
    "sectoral",
    "TJ Sectoral Model"
  ],
  "date_created": "2025-08-22",
  "time_created": "00:14:28",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_name": "create_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Gas Node named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the appropriate category 'gas' and class 'Node' in the TJ Sectoral Model, then create the object named 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Gas Node named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the appropriate category 'gas' and class 'Node' in the TJ Sectoral Model, then create the object named 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Gas Field named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the appropriate category 'gas' and class 'Field' in the TJ Sectoral Model, then create the object named 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Gas Field named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the appropriate category 'gas' and class 'Field' in the TJ Sectoral Model, then create the object named 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "search_kerosene_import_terminals",
      "function_name": "google_search",
      "function_args": {
        "query": "European kerosene import terminals by ship yearly capacity seasonal capacity city name"
      },
      "function_kwargs": {},
      "description": "Search for European kerosene import terminals by ship, including yearly and any seasonal capacities, and associated city names.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Use the query to retrieve authoritative sources listing kerosene import terminals in Europe, their cities, and capacities.",
      "on_error": "abort"
    },
    {
      "task_name": "search_methanol_import_terminals",
      "function_name": "google_search",
      "function_args": {
        "query": "European methanol import terminals by ship yearly capacity seasonal capacity city name"
      },
      "function_kwargs": {},
      "description": "Search for European methanol import terminals by ship, including yearly and any seasonal capacities, and associated city names.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Use the query to retrieve authoritative sources listing methanol import terminals in Europe, their cities, and capacities.",
      "on_error": "abort"
    },
    {
      "task_name": "locate_hydrogen_nodes_dictionary",
      "function_name": "find_file",
      "function_args": {},
      "function_kwargs": {},
      "description": "Locate the nodes dictionary file that contains hydrogen nodes for the TJ Sectoral Model.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Search the project file structure for the nodes dictionary file used by the TJ Sectoral Model that includes hydrogen node names and their city mappings.",
      "on_error": "abort"
    },
    {
      "task_name": "read_hydrogen_nodes_from_dictionary",
      "function_name": "perform_file_crud",
      "function_args": {
        "action": "read",
        "input_data": null,
        "input_location": "{path_from_locate_hydrogen_nodes_dictionary}",
        "output_location": null,
        "output_structure": "dict",
        "output_extension": "json",
        "user_request": "Retrieve hydrogen node entries and their mapped city names for the TJ Sectoral Model.",
        "ai_context": "Extract a mapping of hydrogen node names to city names from the located nodes dictionary file."
      },
      "function_kwargs": {},
      "description": "Read the located nodes dictionary file to retrieve hydrogen node entries and their city mappings.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Parse the nodes dictionary to build a mapping between hydrogen node names and cities to support link creation.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_kerosene_to_hydrogen_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Pipeline object linking the 'e-kerosene import' node to the relevant hydrogen node (no memberships).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Select the 'Pipeline' class within the gas pipeline category and create a pipeline object connecting the 'e-kerosene import' node to the hydrogen node determined by the city match from prior tasks.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_for_kerosene_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to set the capacity property of the kerosene pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the 'Capacity' property for the newly created kerosene pipeline object and set it to the yearly (and if applicable seasonal) capacity identified by the kerosene terminal search.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_methanol_to_hydrogen_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create a Pipeline object linking the 'e-methanol import' node to the relevant hydrogen node (no memberships).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Select the 'Pipeline' class within the gas pipeline category and create a pipeline object connecting the 'e-methanol import' node to the hydrogen node determined by the city match from prior tasks.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_for_methanol_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to set the capacity property of the methanol pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the 'Capacity' property for the newly created methanol pipeline object and set it to the yearly (and if applicable seasonal) capacity identified by the methanol terminal search.",
      "on_error": "abort"
    }
  ]
}