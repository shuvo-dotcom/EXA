{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol in Europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipeline",
    "membership",
    "property",
    "ai",
    "hydrogen"
  ],
  "date_created": "2025-08-19",
  "time_created": "23:34:42",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule (TJ) Sectoral Model specifications. Prefer pipelines for PLEXOS CRUD. Functions are used for AI or file operations. Maintain object naming exactly as provided. Use capacities in TJ/hour.",
  "tasks": [
    {
      "task_name": "load_plexos_xml",
      "function_name": "load_plexos_xml",
      "function_args": {},
      "function_kwargs": {},
      "description": "Load the TJ Sectoral Model into the workspace for modification.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Initialize and open the active PLEXOS model database so subsequent CRUD operations apply to the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "add_e-kerosene_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Gas Node named 'e-kerosene import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in the Gas class group with class 'Gas Node' and name exactly 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "add_e-methanol_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Gas Node named 'e-methanol import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in the Gas class group with class 'Gas Node' and name exactly 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "add_e-kerosene_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Gas Field named 'e-kerosene import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in the Gas class group with class 'Gas Field' and name exactly 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "add_e-methanol_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Gas Field named 'e-methanol import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in the Gas class group with class 'Gas Field' and name exactly 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "identify_eu_import_terminals",
      "function_name": "run_open_ai_ns",
      "function_args": {
        "prompt": "Identify likely European import terminals for synthetic kerosene (e-kerosene) and methanol suitable for hydrogen-derived liquids. For each fuel provide: terminal name, city, country, coordinates if available, throughput capacity converted to TJ/hour (state source units and show conversion), and a source URL. Return a JSON object with keys 'kerosene' and 'methanol' each containing an array of options and a 'recommended' pick with justification. Use reasonable LHV assumptions if needed (kerosene ~ 43 TJ/kt, methanol ~ 19.9 TJ/kt).",
        "context": "Model context: TJ Sectoral Model. Newly created Gas Nodes: 'e-kerosene import', 'e-methanol import'. We need city names to select corresponding Hydrogen Nodes to connect. Provide capacities in TJ/hour.",
        "model": "gpt-4o-mini"
      },
      "function_kwargs": {},
      "description": "Perform an LLM call to identify European import terminals for kerosene and methanol, including capacities in TJ/hour and associated city names.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Use LLM reasoning to compile terminal candidates with city names and capacities in TJ/hour for both fuels to inform downstream object selection and property updates.",
      "on_error": "abort"
    },
    {
      "task_name": "select_h2_node_for_kerosene",
      "function_name": "choose_destination_item",
      "function_args": {},
      "function_kwargs": {},
      "description": "Select the relevant Hydrogen Node to link to 'e-kerosene import' based on the identified city.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "Using results from 'identify_eu_import_terminals', locate the Hydrogen class Node whose name/location best matches the recommended kerosene terminal city. Return the chosen Hydrogen Node ID/name.",
      "on_error": "abort"
    },
    {
      "task_name": "select_h2_node_for_methanol",
      "function_name": "choose_destination_item",
      "function_args": {},
      "function_kwargs": {},
      "description": "Select the relevant Hydrogen Node to link to 'e-methanol import' based on the identified city.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "Using results from 'identify_eu_import_terminals', locate the Hydrogen class Node whose name/location best matches the recommended methanol terminal city. Return the chosen Hydrogen Node ID/name.",
      "on_error": "abort"
    },
    {
      "task_name": "create_kerosene_pipeline_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Pipeline object to connect the 'e-kerosene import' Gas Node to the selected Hydrogen Node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create an object in the Gas Pipeline class group with class 'Pipeline' for the kerosene connection. Name it clearly (e.g., 'e-kerosene import -> {Selected H2 Node}').",
      "on_error": "abort"
    },
    {
      "task_name": "link_kerosene_pipeline_to_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the kerosene Pipeline to the 'e-kerosene import' Gas Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Create the appropriate membership so the Pipeline object references the 'e-kerosene import' Gas Node as one endpoint/source.",
      "on_error": "abort"
    },
    {
      "task_name": "link_kerosene_pipeline_to_h2_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the kerosene Pipeline to the selected Hydrogen Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Create the appropriate membership so the Pipeline object references the selected Hydrogen Node as the other endpoint/destination.",
      "on_error": "abort"
    },
    {
      "task_name": "set_kerosene_pipeline_capacity",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity of the kerosene Pipeline to match the identified import terminal capacity (TJ/hour).",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Update the Pipeline object's Capacity property (units: TJ/hour) using the 'recommended' kerosene terminal capacity returned by 'identify_eu_import_terminals'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_methanol_pipeline_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Pipeline object to connect the 'e-methanol import' Gas Node to the selected Hydrogen Node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create an object in the Gas Pipeline class group with class 'Pipeline' for the methanol connection. Name it clearly (e.g., 'e-methanol import -> {Selected H2 Node}').",
      "on_error": "abort"
    },
    {
      "task_name": "link_methanol_pipeline_to_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the methanol Pipeline to the 'e-methanol import' Gas Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Create the appropriate membership so the Pipeline object references the 'e-methanol import' Gas Node as one endpoint/source.",
      "on_error": "abort"
    },
    {
      "task_name": "link_methanol_pipeline_to_h2_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the methanol Pipeline to the selected Hydrogen Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Create the appropriate membership so the Pipeline object references the selected Hydrogen Node as the other endpoint/destination.",
      "on_error": "abort"
    },
    {
      "task_name": "set_methanol_pipeline_capacity",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity of the methanol Pipeline to match the identified import terminal capacity (TJ/hour).",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Update the Pipeline object's Capacity property (units: TJ/hour) using the 'recommended' methanol terminal capacity returned by 'identify_eu_import_terminals'.",
      "on_error": "abort"
    }
  ]
}