{
    "pipeline_name": "PLEXOS Single Operation (CRUD) Pipeline",
    "description": "Performs a single Create, Read, Update, or Delete operation on a target level within the PLEXOS hierarchy (Category, Object, Membership, or Property).",
    "initial_context": {
        "user_input": "Create an Generator object called IS00 Geothermal in the category Geothermal.",
        "plexos_model_location": "C:\\Users\\ENTSOE\\Tera-joule\\Terajoule - Terajoule\\Projects\\ENTSOG\\DHEM\\NT2030\\TYNDP_2024_DHEM_Model_2030_V6_91_v40.xml",
        "plexos_model_location2": "C:\\Users\\ENTSOE\\Tera-joule\\Terajoule - Terajoule\\Projects\\Sectoral Model\\TJ Sectorial Model\\TJ_2050_Debug_V20_copy.xml",
        "target_level": "object",
        "strategy_action": "create",
        "static_context_strings": {
                                    "default_llm_context": "You are an expert in PLEXOS modeling. You are executing a direct data modification request from the user.",
                                    "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list."
                                    }
                        },
    "target_level_key": "object",    

    "tasks": [
                {
                    "id": "read_plexos_model",
                    "description": "read the PLEXOS model.",
                    "function": "load_plexos_xml",

                    "inputs": {
                        "file_name": "initial_context.plexos_model_location",
                        "new_copy": "True"
                    },
                    "outputs": {
                        "db_connection": "result"
                    }
                },
                {
                    "id": "choose_source_class_group",
                    "description": "Determine the class group from user input.",
                    "function": "get_plexos_table_and_llm_pick_item_id",
                    "inputs": {
                        "user_input": "initial_context.user_input",
                        "context": "initial_context.static_context_strings.default_llm_context",
                        "item_type_for_get_item_id": "t_class_group",
                        "item_id_column": "class_group_id",
                        "item_name_column": "name",
                        "extra_notes": "Class Group are at energy carrier level. It is not concerned with the property being modified"
                    },
                    "outputs": {
                        "class_group_id": "result.id",
                        "class_group_name": "result.name"
                    }
                },

                {
                    "id": "get_active_classes",
                    "description": "Retrieve all active classes in the PLEXOS model.",
                    "function": "get_active_classes",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection"
                    },
                    "outputs": {
                        "active_classes": "result"
                    }
                },

                {
                    "id": "choose_source_class",
                    "description": "Determine the primary class for the operation.",
                    "function": "get_plexos_table_and_llm_pick_item_id",
                    "inputs": {
                        "user_input": "initial_context.user_input",
                        "context": "initial_context.static_context_strings.default_llm_context",
                        "item_type_for_get_item_id": "t_class",
                        "grp": "tasks.choose_source_class_group.outputs.class_group_id",
                        "strategy_action": "initial_context.strategy_action",
                        "item_id_column": "class_id",
                        "item_name_column": "name",
                        "all_class_objects": "tasks.get_active_classes.outputs.active_classes"
                    },
                    "outputs": {
                        "class_id": "result.id",
                        "class_name": "result.name"
                    }
                },

                {
                    "id": "read_all_categories_for_source_class",
                    "description": "read all categories for the determined class.",
                    "function": "get_categories",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "nClassId": "tasks.choose_source_class.outputs.class_id"
                    },
                    "outputs": {
                        "raw_categories_list": "result"
                                }
                },

                {
                "id": "choose_source_category",
                "description": "LLM selects an existing category or suggests a new one.",
                "function": "choose_source_item",
                "inputs": {
                            "user_input": "initial_context.user_input",
                            "action": "initial_context.strategy_action",
                            "item_set": "tasks.read_all_categories_for_source_class.outputs.raw_categories_list",
                            "item_type": "Category",
                            "model": "gpt-4.1"
                            },
                "outputs": {
                            "final_category_name": "result.selected_name",
                            "category_selection_type": "result.selection_type",
                            "reasoning": "result.reasoning"
                            },
                "type": "LLM API Call"
                },

                {
                    "id": "execute_category_action",
                    "description": "Perform a CRUD operation at the Category level.",
                    "condition": "initial_context.target_level == 'category' OR tasks.choose_source_category.outputs.category_selection_type == 'new_item'",
                    "function": "perform_crud_operation",
                    "inputs": {
                            "db": "tasks.read_plexos_model.outputs.db_connection",
                            "user_input": "initial_context.user_input",
                            "context": "initial_context.static_context_strings.default_llm_context",
                            "level": "initial_context.target_level",
                            "action": "initial_context.action",
                            "action_details": "initial_context.action_details",
                            "identifiers": {
                                "class_id": "tasks.choose_source_class.outputs.class_id",
                                "category_name": "tasks.choose_source_category.outputs.final_category_name", 
                                "new_category": "tasks.choose_source_category.outputs.category_selection_type",
                                "sub_level": "category"
                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },
                
                {
                "id": "read_all_objects_in_source_category",
                "description": "read all objects for the determined category. Returns list_of_objects and the original_item for pipeline execution.",
                "type": "plexos_api_call",
                "function": "get_objects_in_category",
                "condition": "tasks.choose_source_category.outputs.category_selection_type != 'undertermined'",
                "inputs": {
                            "db": "tasks.read_plexos_model.outputs.db_connection",
                            "nClassId": "tasks.choose_source_class.outputs.class_id",
                            "strCategory": "tasks.choose_source_category.outputs.final_category_name"
                            },
                            
                "outputs": {
                            "list_of_objects": "result"
                            }
                },

                {"id": "read_all_objects_in_source_class",
                "description": "read all objects for the determined class. Returns list_of_objects and the original_item for pipeline execution.",
                "type": "plexos_api_call",
                "condition": "tasks.choose_source_category.outputs.category_selection_type == 'undertermined'",
                "function": "get_objects_in_class", 
                "inputs": {
                            "db": "tasks.read_plexos_model.outputs.db_connection",
                            "nClassId": "tasks.choose_source_class.outputs.class_id"
                            },
                "outputs": {
                            "list_of_objects": "result"
                            }
                },

                {
                "id": "choose_objects",
                "description": "LLM determines original object for pipeline execution.",
                "function": "choose_object_subset",
                "type": "LLM API Call",
                "inputs": {
                            "user_input": "initial_context.user_input",
                            "object_set": "tasks.read_all_objects_in_source_category.outputs.list_of_objects",
                            "object_type": "tasks.choose_source_class.outputs.class_name",
                            "selected_level": "initial_context.target_level_key",
                            "operation_type": "initial_context.strategy_action",
                            "model": "o3-mini",
                            "all_class_objects": "None"
                            },
                "outputs": {
                            "list_of_objects": "result.list_of_objects"
                            }
                },

                {
                    "id": "execute_object_action",
                    "description": "Perform a CRUD operation at the Object level.",
                    "condition": "initial_context.target_level == 'object'",
                    "function": "perform_crud_operation",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "user_input": "initial_context.user_input",
                        "context": "initial_context.static_context_strings.default_llm_context",
                        "level": "object",
                        "action": "initial_context.strategy_action",
                        "action_details": "initial_context.action_details",
                        "identifiers": {
                            "class_id": "tasks.choose_source_class.outputs.class_id",
                            "category_name": "tasks.choose_source_category.outputs.final_category_name",
                            "object_name": "tasks.choose_objects.outputs.list_of_objects"
                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },

                {
                "id": "read_all_object_collections",
                "description": "read all collections for the object", 
                "type": "plexos_api_call",
                "function": "get_collections",
                "inputs": {
                            "db": "tasks.read_plexos_model.outputs.db_connection",
                            "object_name": "tasks.choose_objects.outputs.object_name",
                            "class_name": "tasks.choose_source_class.outputs.class_name",
                            "class_id": "tasks.choose_source_class.outputs.class_id",
                            "list_of_objects": "tasks.choose_objects.outputs.list_of_objects",
                            "object_list_id": "tasks.choose_objects.outputs.object_id"
                            },
                "outputs": {
                            "collections_list": "result"
                            }
                },         

                {
                "id": "choose_membership",
                "description": "Choose the specific membership (collection) for the operation.",
                "condition": "initial_context.target_level == 'membership' OR initial_context.target_level == 'property'",
                "function": "choose_collection_subset",
                "inputs": {
                    "user_input": "initial_context.user_input", 
                    "collection_set": "tasks.read_all_object_collections.outputs.collections_list",
                    "collection_type": "initial_context.target_level",
                    "selected_level": "initial_context.target_level",
                    "operation_type": "initial_context.strategy_action",
                            "action": "initial_context.strategy_action",
                    "model": "o3-mini"
                    },
                "outputs": { 
                            "list_of_collections": "result.list_of_collections",
                            "reasoning": "result.reasoning"
                            },
                "type": "Choose"
                },

                {
                    "id": "execute_membership_action",
                    "description": "Perform a CRUD operation at the Membership level.",
                    "condition": "initial_context.target_level == 'membership'",
                    "function": "perform_crud_operation",
                    "inputs": {
                        "db": "tasks.read_plexos_model.outputs.db_connection",
                        "user_input": "initial_context.user_input",
                        "context": "initial_context.static_context_strings.default_llm_context",
                        "level": "initial_context.target_level",
                        "action": "initial_context.strategy_action",
                        "action_details": "initial_context.strategy_action",
                        "identifiers": { 
                            "collection_id": "tasks.choose_membership.outputs.list_of_collections",
                            "all_collections_data": "tasks.read_all_object_collections.outputs.collections_list",                         
                            "object_name": "tasks.choose_objects.outputs.list_of_objects"
                        }
                    },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },

                {
                "id": "get_membership_properties",
                "description": "Get properties of the original object from the membership.",
                "function": "get_properties_table_to_dict",
                "type": "plexos_api_call",
                "inputs": {
                            "db": "tasks.read_plexos_model.outputs.db_connection",
                            "collection_id": "tasks.choose_membership.outputs.list_of_collections",
                            "collection_key": "tasks.choose_membership.outputs.membership_details.collection_key",
                            "all_collections_data": "tasks.read_all_object_collections.outputs.collections_list"                         
                            },
                "outputs": {
                            "source_properties_list": "result"
                            }  
                },

                {
                    "id": "choose_property",
                    "description": "Choose the specific property for the operation.",
                    "condition": "initial_context.target_level == 'property'",
                    "function": "choose_property_subset",
                    "inputs": {
                        "user_input": "initial_context.user_input", 
                        "property_set": "tasks.get_membership_properties.outputs.source_properties_list",
                        "selected_level": "initial_context.target_level",
                        "operation_type": "initial_context.strategy_action",
                        "property_type": "initial_context.static_context_strings.entity_selection_context",
                        "model": "o3-mini"
                        },
                    "outputs": { 
                                "chosen_properties": "result.list_of_properties",
                                "reasoning": "result.reasoning"
                                },
                    "type": "Choose"
                },

                {
                    "id": "execute_property_action",
                    "description": "Perform a CRUD operation at the Property level.",
                    "condition": "initial_context.target_level == 'property'",
                    "function": "perform_crud_operation",
                    "inputs": {
                                "db": "tasks.read_plexos_model.outputs.db_connection", 
                                "user_input": "initial_context.user_input",
                                "context": "initial_context.static_context_strings.default_llm_context",
                                "level": "initial_context.target_level", 
                                "action": "initial_context.strategy_action", 
                                "action_details": "initial_context.action_details",
                                "identifiers": { 
                                                    "list_of_properties": "tasks.get_membership_properties.outputs.source_properties_list",
                                                    "chosen_properties": "tasks.choose_property.outputs.chosen_properties",     
                                                    "collection_id": "tasks.choose_membership.outputs.list_of_collections",
                                                    "list_of_collections": "tasks.read_all_object_collections.outputs.collections_list"
                                                    }
                        },
                    "outputs": { "status": "result.status",
                                "end_process": "result.end_process" },
                    "type": "Update"
                },
                {
                    "id": "close_plexos_database",
                    "description": "Close the PLEXOS database connection.",
                    "function": "close_model",
                    "inputs": { "db": "tasks.read_plexos_model.outputs.db_connection" },
                    "outputs": { "status": "result" },
                    "type": "Update"
                }
            ]
}
