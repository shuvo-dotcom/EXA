{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the NUTS regions e-highway link file in a folder that contains nodes and lines. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "object",
    "create",
    "gas",
    "pipeline",
    "web",
    "search",
    "ai",
    "file"
  ],
  "date_created": "2025-08-22",
  "time_created": "01:54:44",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_name": "create_e_kerosene_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e_methanol_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e_kerosene_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e_methanol_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "web_search_import_terminals",
      "function_name": "google_search",
      "function_args": {
        "query": "import terminals for kerosene (jet fuel) and methanol into Europe by ship; list terminal names, cities, countries; yearly capacities; seasonal capacity information"
      },
      "function_kwargs": {},
      "description": "Search the web for import terminals for kerosene and methanol into Europe by ship, including yearly capacities and any seasonal capacity information.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "summarize_terminals_with_llm",
      "function_name": "run_open_ai_ns",
      "function_args": {
        "prompt": "From the provided search results, extract and summarize import terminal names, cities, countries, and capacities for kerosene and methanol. Include annual capacities and any seasonal capacity details. Return a structured list suitable for mapping to model nodes.",
        "context": "Use the results returned by the 'web_search_import_terminals' task.",
        "model": "gpt-4o-mini"
      },
      "function_kwargs": {},
      "description": "Call the LLM to extract and summarize terminal names, cities, and capacities (including seasonal details) for kerosene and methanol imports from the search results.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "locate_nuts_regions_link_file",
      "function_name": "find_file",
      "function_args": {
        "user_input": "Locate the 'NUTS regions e-highway link' file in a folder that contains nodes and lines."
      },
      "function_kwargs": {},
      "description": "Locate the 'NUTS regions e-highway link' file in a folder containing nodes and lines.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "read_nuts_regions_link_file",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read the located 'NUTS regions e-highway link' file to obtain city names and mappings for linking to Hydrogen nodes.",
        "context": "Use the file path from 'locate_nuts_regions_link_file' and the terminal city list from 'summarize_terminals_with_llm' to prepare city-to-node mappings.",
        "action": "read"
      },
      "function_kwargs": {
        "input_location": "",
        "output_location": ""
      },
      "description": "Read the located 'NUTS regions e-highway link' file to obtain city names for linking.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipelines_linking_ekerosene_to_h2",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Pipeline object(s) to link the 'e-kerosene import' Gas Node to the relevant Hydrogen node(s), using city mappings derived from the NUTS regions link file and terminal summaries.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    },
    {
      "task_name": "update_pipeline_capacity_from_research",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the capacity property of the created Pipeline object(s) to match the researched import terminal capacities (apply annual capacity; incorporate seasonal details if available in the model schema).",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "on_error": "abort"
    }
  ]
}