{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol in Europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes using the datafile hydrogen_nodes.csv. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipeline",
    "search",
    "llm",
    "hydrogen",
    "tj-sectoral-model"
  ],
  "date_created": "2025-08-20",
  "time_created": "01:21:49",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule (TJ) Sectoral Model specifications. Use PLEXOS CRUD pipelines for category/object/membership/property/attribute operations. Use functions only for external data interactions (search/LLM/data files). Maintain consistent naming and units (TJ/hour).",
  "tasks": [
    {
      "task_name": "create_e-kerosene_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas. Object class: Gas Node (Node). Create a new object with name 'e-kerosene import'. Ensure the name is unique and consistent with gas network naming conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e-methanol_import_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas. Object class: Gas Node (Node). Create a new object with name 'e-methanol import'. Ensure the name is unique and consistent with gas network naming conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e-kerosene_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas. Object class: Gas Field (Field). Create a new object with name 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_e-methanol_import_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas. Object class: Gas Field (Field). Create a new object with name 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "search_kerosene_import_terminals_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "European kerosene import terminals city capacity TJ/hour site:eu OR site:gov OR site:port-authority OR site:wikipedia"
      },
      "function_kwargs": {},
      "description": "Search for European kerosene import terminals, including city names and capacities in TJ/hour.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Gather authoritative sources listing kerosene (jet fuel) import terminals in Europe with city and capacity; prefer official port/operator documents. Capture URLs.",
      "on_error": "abort"
    },
    {
      "task_name": "search_methanol_import_terminals_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "European methanol import terminals city capacity TJ/hour site:eu OR site:gov OR site:port-authority OR site:wikipedia"
      },
      "function_kwargs": {},
      "description": "Search for European methanol import terminals, including city names and capacities in TJ/hour.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Gather authoritative sources listing methanol import terminals in Europe with city and capacity; prefer official port/operator documents. Capture URLs.",
      "on_error": "abort"
    },
    {
      "task_name": "extract_terminal_city_capacity_from_search",
      "function_name": "run_open_ai_ns",
      "function_args": {
        "prompt": "From the provided search snippets and linked content, extract a structured list for both kerosene (jet fuel) and methanol import terminals in Europe. For each record, return: fuel_type (kerosene|methanol), terminal_name, city, country, capacity_tj_per_hour (numeric), capacity_source_unit (if not TJ/h), any conversion used, and source_urls. If capacities are given in other units (e.g., t/y, t/d, m3/h), convert to TJ/hour using reasonable standard energy densities (kerosene ~ 34.2 MJ/L; methanol ~ 19.9 MJ/L; densities kerosene ~ 0.8 kg/L; methanol ~ 0.792 kg/L) and document the conversion. Return JSON only.",
        "context": "",
        "model": "gpt-4o-mini"
      },
      "function_kwargs": {},
      "description": "Extract and structure terminal name, city, and capacity (TJ/hour) from the search results for kerosene and methanol.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Use the outputs from both Google search tasks to build a normalized dataset per fuel. Ensure each entry includes city for mapping to hydrogen nodes.",
      "on_error": "abort"
    },
    {
      "task_name": "read_hydrogen_nodes_city_index",
      "function_name": "modify_data_file",
      "function_args": {
        "plexos_model_location": "",
        "input_file_path": "hydrogen_nodes.csv",
        "user_input": "Read the file and produce an in-memory mapping of city -> hydrogen_node_name (case-insensitive on city). If multiple nodes per city, return the preferred or list; include country if present. Do not modify the source file.",
        "output_file_path": ""
      },
      "function_kwargs": {},
      "description": "Open hydrogen_nodes.csv and retrieve hydrogen node names keyed by city for linking.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Locate hydrogen_nodes.csv within the model data files and parse to obtain city-to-node mapping for subsequent pipeline endpoint selection.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_kerosene_import_to_h2node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Pipeline object to link the 'e-kerosene import' Gas Node to the relevant hydrogen node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas Pipeline (or H2 Pipeline, per model convention). Create a Pipeline object with endpoints: source node = 'e-kerosene import' (Gas Node), sink node = hydrogen node matched by city from extracted terminal data and hydrogen_nodes.csv. Name convention: 'PIPE_e-kerosene_import_to_{H2Node}'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_methanol_import_to_h2node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Pipeline object to link the 'e-methanol import' Gas Node to the relevant hydrogen node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Model: TJ Sectoral Model. Category: Gas Pipeline (or H2 Pipeline, per model convention). Create a Pipeline object with endpoints: source node = 'e-methanol import' (Gas Node), sink node = hydrogen node matched by city from extracted terminal data and hydrogen_nodes.csv. Name convention: 'PIPE_e-methanol_import_to_{H2Node}'.",
      "on_error": "abort"
    },
    {
      "task_name": "update_capacity_kerosene_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the 'Capacity' property (TJ/hour) of the kerosene pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the newly created kerosene import Pipeline object and update its Capacity property. Set units to TJ/hour. Value sourced from the LLM-extracted kerosene terminal capacity for the mapped city; apply any necessary unit conversion already computed.",
      "on_error": "abort"
    },
    {
      "task_name": "update_capacity_methanol_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the 'Capacity' property (TJ/hour) of the methanol pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the newly created methanol import Pipeline object and update its Capacity property. Set units to TJ/hour. Value sourced from the LLM-extracted methanol terminal capacity for the mapped city; apply any necessary unit conversion already computed.",
      "on_error": "abort"
    }
  ]
}