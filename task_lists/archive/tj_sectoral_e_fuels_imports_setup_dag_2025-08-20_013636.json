{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol in Europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes by reading the hydrogen node to city map hydrogen_nodes.csv. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "node",
    "field",
    "pipeline",
    "search",
    "datafile",
    "update",
    "TJ Sectoral Model"
  ],
  "date_created": "2025-08-20",
  "time_created": "01:38:06",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule (TJ) Sectoral Model specifications. Prioritize PLEXOS CRUD pipelines for model changes, and use functions only for external data retrieval or file reading.",
  "tasks": [
    {
      "task_name": "create_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, create a Gas Node named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in Category: Gas Node, Model: TJ Sectoral Model, Object Name: 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, create a Gas Node named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in Category: Gas Node, Model: TJ Sectoral Model, Object Name: 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, create a Gas Field named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in Category: Gas Field, Model: TJ Sectoral Model, Object Name: 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, create a Gas Field named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create an object in Category: Gas Field, Model: TJ Sectoral Model, Object Name: 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "search_import_terminals_kerosene_and_methanol_EU",
      "function_name": "google_search",
      "function_args": {
        "query": "European import terminals kerosene OR 'jet fuel' and methanol with capacities in TJ/hour and associated city names"
      },
      "function_kwargs": {},
      "description": "Perform a web search to identify European import terminals for kerosene and methanol and collect their capacities in TJ/hour, including associated city names.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', gather external data (terminal names, cities, and capacities in TJ/hour) to be used for subsequent PLEXOS pipeline creation and capacity updates.",
      "on_error": "log_and_continue"
    },
    {
      "task_name": "read_hydrogen_node_city_mapping",
      "function_name": "Datafile_search",
      "function_args": {},
      "function_kwargs": {},
      "description": "Open and read hydrogen_nodes.csv to obtain the mapping of hydrogen nodes to city names.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', locate and read 'hydrogen_nodes.csv' to extract the mapping between hydrogen node names and their city names.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipelines_linking_kerosene_import_node_to_hydrogen_nodes",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, create Pipeline object(s) to link the 'e-kerosene import' Gas Node to the relevant hydrogen node(s) based on the city mapping.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', use the city mapping from hydrogen_nodes.csv and the identified kerosene import terminal cities to select the appropriate Hydrogen Node objects. Create corresponding Pipeline object(s) connecting from Gas Node 'e-kerosene import' to those Hydrogen Node object(s) in the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "set_pipeline_capacity_from_terminal_data",
      "pipeline_name": "crud_pipeline.json",
      "description": "Using crud_pipeline.json, set the Capacity (TJ/hour) property of the created pipeline(s) to match the identified import terminal capacities.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the Capacity property of the newly created Pipeline object(s) and update it to the values (in TJ/hour) obtained from the import terminal data.",
      "on_error": "abort"
    }
  ]
}