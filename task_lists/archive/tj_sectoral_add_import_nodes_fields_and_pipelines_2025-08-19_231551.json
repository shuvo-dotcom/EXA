{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol in Europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipelines",
    "hydrogen",
    "ai-search",
    "properties"
  ],
  "date_created": "2025-08-19",
  "time_created": "23:17:24",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule (TJ) Sectoral Model specifications. Prefer existing PLEXOS classes and properties; use city names to link to Hydrogen Nodes; set pipeline capacities in Tj/hour.",
  "tasks": [
    {
      "task_name": "search_import_terminals_eu_kerosene_and_methanol",
      "function_name": "google_search",
      "description": "Search for European kerosene and methanol import terminals, including terminal names, city names, and reported capacities in Tj/hour (or alternative units if Tj/hour not available).",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', discover authoritative sources (e.g., port authorities, terminal operators, industry reports) listing import terminals for kerosene and methanol in Europe. Return snippets sufficient for extraction of terminal name, city, country, and capacity.",
      "on_error": "abort",
      "function_args": {
        "query": "European kerosene import terminal city capacity Tj/hour; European methanol import terminal city capacity Tj/hour"
      },
      "function_kwargs": {}
    },
    {
      "task_name": "llm_extract_terminal_city_capacity_structured",
      "function_name": "openai_llm_call",
      "description": "Extract and structure the terminal names, city names, countries, fuel type (kerosene or methanol), and capacities (Tj/hour) from the search results. Convert units to Tj/hour if needed.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', parse the prior search results into a structured list with fields: fuel_type, terminal_name, city, country, capacity_tj_per_hour, source_url. If capacities are provided in other units, convert to Tj/hour and include the conversion method.",
      "on_error": "abort",
      "function_args": {
        "prompt": "From the provided web search results, extract import terminals for kerosene and methanol in Europe. For each item return JSON objects: {fuel_type, terminal_name, city, country, capacity_tj_per_hour, unit_original, capacity_original_value, source_url}. Convert any non-Tj/hour units to Tj/hour and document assumptions.",
        "context": "{search_import_terminals_eu_kerosene_and_methanol.output}",
        "model": "gpt-4o-mini"
      },
      "function_kwargs": {}
    },
    {
      "task_name": "create_gas_node_e_kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a new object in the Gas Node class (gas category) named exactly 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e_methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a new object in the Gas Node class (gas category) named exactly 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e_kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a new object in the Gas Field class (gas category) named exactly 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e_methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a new object in the Gas Field class (gas category) named exactly 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "pick_hydrogen_node_for_kerosene_by_city",
      "function_name": "choose_destination_item",
      "description": "Select the relevant Hydrogen Node by city name for linking from the 'e-kerosene import' node.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}' and the extracted city for kerosene terminals, identify the best-matching Hydrogen Node in the model. If multiple matches exist, prefer the node in the same country and with the closest city name. Return the selected Hydrogen Node.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_object_kerosene_to_h2node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Pipeline object for linking the 'e-kerosene import' Gas Node to the selected Hydrogen Node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Pipeline object (gas pipeline class) intended to connect 'e-kerosene import' to the chosen Hydrogen Node. Use a clear name combining endpoints if naming is required.",
      "on_error": "abort"
    },
    {
      "task_name": "link_pipeline_to_kerosene_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the new kerosene Pipeline to the 'e-kerosene import' Gas Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', establish the membership associating the Pipeline with the 'e-kerosene import' Gas Node as an endpoint/connection, using the appropriate parent/child roles for pipeline-to-node in the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "link_pipeline_to_selected_hydrogen_node_kerosene",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the new kerosene Pipeline to the selected Hydrogen Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', establish the membership associating the Pipeline with the selected Hydrogen Node as the other endpoint/connection, using the appropriate parent/child roles.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_on_kerosene_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity (Tj/hour) of the kerosene Pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}' and the structured extraction, update the Pipeline capacity property to the value in Tj/hour. If multiple kerosene terminals/cities are selected, apply capacity to the corresponding pipeline instance.",
      "on_error": "abort"
    },
    {
      "task_name": "pick_hydrogen_node_for_methanol_by_city",
      "function_name": "choose_destination_item",
      "description": "Select the relevant Hydrogen Node by city name for linking from the 'e-methanol import' node.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}' and the extracted city for methanol terminals, identify the best-matching Hydrogen Node in the model. If multiple matches exist, prefer the node in the same country and with the closest city name. Return the selected Hydrogen Node.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_object_methanol_to_h2node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a new Pipeline object for linking the 'e-methanol import' Gas Node to the selected Hydrogen Node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Pipeline object (gas pipeline class) intended to connect 'e-methanol import' to the chosen Hydrogen Node. Use a clear name combining endpoints if naming is required.",
      "on_error": "abort"
    },
    {
      "task_name": "link_pipeline_to_methanol_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the new methanol Pipeline to the 'e-methanol import' Gas Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', establish the membership associating the Pipeline with the 'e-methanol import' Gas Node as an endpoint/connection, using the appropriate parent/child roles for pipeline-to-node.",
      "on_error": "abort"
    },
    {
      "task_name": "link_pipeline_to_selected_hydrogen_node_methanol",
      "pipeline_name": "crud_pipeline.json",
      "description": "Link the new methanol Pipeline to the selected Hydrogen Node.",
      "target_level": "membership",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', establish the membership associating the Pipeline with the selected Hydrogen Node as the other endpoint/connection, using the appropriate parent/child roles.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_on_methanol_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity (Tj/hour) of the methanol Pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}' and the structured extraction, update the Pipeline capacity property to the value in Tj/hour. If multiple methanol terminals/cities are selected, apply capacity to the corresponding pipeline instance.",
      "on_error": "abort"
    }
  ]
}