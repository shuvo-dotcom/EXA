{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Find out where in import terminals for kerosene and methanol are in europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "DAG-Builder",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipeline",
    "capacity",
    "eu-import-terminals"
  ],
  "date_created": "2025-08-19",
  "time_created": "23:10:03",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_name": "add_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add Gas Node 'e-kerosene import' to the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create a new Gas Node object named 'e-kerosene import' in the Gas category of the TJ Sectoral Model. Ensure the class/group selection matches Gas Node conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "add_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add Gas Node 'e-methanol import' to the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create a new Gas Node object named 'e-methanol import' in the Gas category of the TJ Sectoral Model. Ensure the class/group selection matches Gas Node conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "add_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add Gas Field 'e-kerosene import' to the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create a new Gas Field object named 'e-kerosene import' in the Gas category of the TJ Sectoral Model. Ensure the class/group selection matches Gas Field conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "add_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add Gas Field 'e-methanol import' to the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create a new Gas Field object named 'e-methanol import' in the Gas category of the TJ Sectoral Model. Ensure the class/group selection matches Gas Field conventions.",
      "on_error": "abort"
    },
    {
      "task_name": "get_kerosene_import_terminal_details",
      "function_name": "get_plexos_item",
      "description": "Retrieve European import terminal details for kerosene, including capacity (Tj/hour) and city name.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "From the available PLEXOS items and external knowledge sources if integrated, identify the European kerosene import terminal(s). Return object identification plus its capacity (Tj/hour) property and city name attribute for linkage.",
      "on_error": "abort"
    },
    {
      "task_name": "get_methanol_import_terminal_details",
      "function_name": "get_plexos_item",
      "description": "Retrieve European import terminal details for methanol, including capacity (Tj/hour) and city name.",
      "target_level": "object",
      "strategy_action": "read",
      "entity_selection_context": "From the available PLEXOS items and external knowledge sources if integrated, identify the European methanol import terminal(s). Return object identification plus its capacity (Tj/hour) property and city name attribute for linkage.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_from_e-kerosene_import_to_h2_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a pipeline object that links the 'e-kerosene import' Gas Node to the relevant hydrogen node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Create a Pipeline object in the appropriate pipeline class/category that connects the Gas Node 'e-kerosene import' to the Hydrogen node located in the same city as the identified kerosene import terminal. Use the retrieved city name to select the correct Hydrogen node.",
      "on_error": "abort"
    },
    {
      "task_name": "update_pipeline_capacity_from_kerosene_terminal",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the pipeline's capacity property to match the kerosene import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the capacity property (Tj/hour) for the newly created pipeline linking 'e-kerosene import' to the Hydrogen node and set it to the value retrieved from the kerosene import terminal details.",
      "on_error": "abort"
    }
  ]
}