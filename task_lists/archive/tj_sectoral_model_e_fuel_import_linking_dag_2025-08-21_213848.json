{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol in Europe and their capacity in Tj/hour. Ensure we have the city name so we can link them to the hydrogen nodes by reading the hydrogen node to city map hydrogen_nodes.csv. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "object",
    "create",
    "gas",
    "pipeline",
    "search",
    "file",
    "update",
    "TJ Sectoral Model"
  ],
  "date_created": "2025-08-21",
  "time_created": "21:39:39",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_name": "create_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate category and class for the Gas Node object within the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate category and class for the Gas Node object within the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate category and class for the Gas Field object within the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate category and class for the Gas Field object within the TJ Sectoral Model.",
      "on_error": "abort"
    },
    {
      "task_name": "search_import_terminals_kerosene_methanol_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "Europe kerosene import terminal capacity TJ/h city; Europe methanol import terminal capacity TJ/h city"
      },
      "function_kwargs": {},
      "description": "Perform a web search to find import terminals for kerosene and methanol in Europe, including terminal capacities (TJ/hour) and associated city names.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Use the user's request and model context to identify relevant terminal names, cities, and capacities to later map to hydrogen nodes.",
      "on_error": "log_and_continue"
    },
    {
      "task_name": "read_hydrogen_node_city_map",
      "function_name": "file_crud_operation",
      "function_args": {
        "action": "read",
        "input_data": null,
        "input_location": "hydrogen_nodes.csv",
        "output_location": null,
        "output_structure": "list[dict]",
        "output_extension": "csv",
        "user_request": "Read the hydrogen node to city map from hydrogen_nodes.csv to obtain hydrogen node names and their cities.",
        "ai_context": "Extract records with columns for hydrogen node name and associated city to enable mapping from terminal city to hydrogen node."
      },
      "function_kwargs": {},
      "description": "Read the hydrogen node to city mapping from hydrogen_nodes.csv to obtain hydrogen node names and their cities.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Use the CSV file to retrieve hydrogen nodes and their corresponding cities for mapping pipeline connections.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_link_e-kerosene_to_hydrogen_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-kerosene import' Gas Node to the relevant hydrogen node in the TJ Sectoral Model. Determine the hydrogen node by matching the terminal city from the search results with the hydrogen_nodes.csv mapping.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Match the city from the kerosene import terminal (task search output) to the hydrogen node in hydrogen_nodes.csv (task read output), then create the Pipeline object linking 'e-kerosene import' Gas Node to that hydrogen node.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_pipeline_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity property of the 'e-kerosene import' Pipeline to match the corresponding kerosene import terminal capacity (TJ/hour).",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Capacity property of the Pipeline object created for 'e-kerosene import' and update it to the capacity value derived from the kerosene terminal found in the web search.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_link_e-methanol_to_hydrogen_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-methanol import' Gas Node to the relevant hydrogen node in the TJ Sectoral Model. Determine the hydrogen node by matching the terminal city from the search results with the hydrogen_nodes.csv mapping.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Match the city from the methanol import terminal (task search output) to the hydrogen node in hydrogen_nodes.csv (task read output), then create the Pipeline object linking 'e-methanol import' Gas Node to that hydrogen node.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_pipeline_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the capacity property of the 'e-methanol import' Pipeline to match the corresponding methanol import terminal capacity (TJ/hour).",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Capacity property of the Pipeline object created for 'e-methanol import' and update it to the capacity value derived from the methanol terminal found in the web search.",
      "on_error": "abort"
    }
  ]
}