{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the nodes dictionary. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipeline",
    "search",
    "hydrogen",
    "TJ Sectoral Model"
  ],
  "date_created": "2025-08-22",
  "time_created": "01:32:55",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications. Use PLEXOS CRUD pipelines for model edits and functions for external file/search operations. Maintain object creation before property updates.",
  "tasks": [
    {
      "task_name": "create_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select category Gas and object class Node in the TJ Sectoral Model, and create the object with the specified name.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select category Gas and object class Node in the TJ Sectoral Model, and create the object with the specified name.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select category Gas and object class Field in the TJ Sectoral Model, and create the object with the specified name.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select category Gas and object class Field in the TJ Sectoral Model, and create the object with the specified name.",
      "on_error": "abort"
    },
    {
      "task_name": "web_search_import_terminals_kerosene_and_methanol_Europe",
      "function_name": "google_search",
      "function_args": {
        "query": "Europe kerosene import terminal ship annual capacity seasonal OR seasonality; Europe methanol import terminal ship annual capacity seasonal OR seasonality; site:port-authority OR site:gov OR site:terminaloperator"
      },
      "function_kwargs": {},
      "description": "Perform a web search to find import terminals for kerosene and methanol into Europe by ship, including yearly capacity and any seasonal capacity information.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Construct the most appropriate web queries based on '{user_input}' and return terminal names, cities, countries, annual and seasonal capacities with sources.",
      "on_error": "log_and_continue"
    },
    {
      "task_name": "locate_hydrogen_nodes_dictionary_file",
      "function_name": "find_file",
      "function_args": {
        "user_input": "Locate the nodes dictionary file that contains the city names for hydrogen nodes in the TJ Sectoral Model (e.g., JSON/CSV mapping of hydrogen node names to cities)."
      },
      "function_kwargs": {},
      "description": "Locate the nodes dictionary file that contains city names for hydrogen nodes.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Search the project file structure based on '{user_input}' to find the most relevant nodes dictionary file used for hydrogen nodes.",
      "on_error": "abort"
    },
    {
      "task_name": "read_hydrogen_nodes_dictionary",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read the located nodes dictionary file to obtain the city names of hydrogen nodes.",
        "context": "Return a mapping of hydrogen node names to their city names to support linking import pipelines.",
        "action": "read"
      },
      "function_kwargs": {
        "input_location": "",
        "output_location": ""
      },
      "description": "Read the located nodes dictionary file to obtain the city names of hydrogen nodes.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Using the file path found in the previous task, extract hydrogen node names and their corresponding cities to enable matching with import terminals.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_object_for_kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object intended to link the 'e-kerosene import' Gas Node to the relevant Hydrogen Node (do not create memberships).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on '{user_input}' and the discovered city mapping, select category Gas Pipeline (or equivalent pipeline class) and create a Pipeline object referencing the 'e-kerosene import' Gas Node and the matched Hydrogen Node. Do not create memberships.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_for_kerosene_import_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the Capacity property of the kerosene import Pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Pipeline object created for 'e-kerosene import' and update its Capacity property using the capacity identified from the web search (ensure units consistent with the model).",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_object_for_methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object intended to link the 'e-methanol import' Gas Node to the relevant Hydrogen Node (do not create memberships).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on '{user_input}' and the discovered city mapping, select category Gas Pipeline (or equivalent pipeline class) and create a Pipeline object referencing the 'e-methanol import' Gas Node and the matched Hydrogen Node. Do not create memberships.",
      "on_error": "abort"
    },
    {
      "task_name": "set_capacity_for_methanol_import_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the Capacity property of the methanol import Pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Pipeline object created for 'e-methanol import' and update its Capacity property using the capacity identified from the web search (ensure units consistent with the model).",
      "on_error": "abort"
    }
  ]
}