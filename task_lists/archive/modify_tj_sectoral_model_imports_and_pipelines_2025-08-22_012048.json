{
  "user_input": "Modify the TJ Sectoral Model.\nAdd 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'.\nAdd 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'.\nPerform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities.\nEnsure we have the city name so we can link them to the hydrogen nodes by locating and reading the nodes dictionary.\nCreate pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "object",
    "gas",
    "pipeline",
    "search",
    "file",
    "capacity",
    "tj-sectoral-model"
  ],
  "date_created": "2025-08-22",
  "time_created": "01:21:36",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications. Use PLEXOS CRUD pipelines for model/database changes and functions for external search and file operations. Ensure that objects are created before updating their properties.",
  "tasks": [
    {
      "task_name": "create_gas_node_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-kerosene import' in the TJ Sectoral Model (Gas category, Node class).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select Category: Gas; Class: Node; Model: TJ Sectoral Model; Name: 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Node object named 'e-methanol import' in the TJ Sectoral Model (Gas category, Node class).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select Category: Gas; Class: Node; Model: TJ Sectoral Model; Name: 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-kerosene import' in the TJ Sectoral Model (Gas category, Field class).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select Category: Gas; Class: Field; Model: TJ Sectoral Model; Name: 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e-methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Gas Field object named 'e-methanol import' in the TJ Sectoral Model (Gas category, Field class).",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select Category: Gas; Class: Field; Model: TJ Sectoral Model; Name: 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "search_import_terminals_kerosene_methanol_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "European ship import terminals kerosene and methanol annual capacity seasonal capacity port city"
      },
      "function_kwargs": {},
      "description": "Search the web for European ship import terminals for kerosene and methanol; capture terminal names, city/port, country, annual capacity, and any seasonal capacity information.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', extract terminal, city, and capacity details for subsequent model updates.",
      "on_error": "abort"
    },
    {
      "task_name": "locate_nodes_dictionary",
      "function_name": "find_file",
      "function_args": {
        "user_input": "Locate the 'nodes dictionary' file used to map city names to hydrogen nodes in the TJ Sectoral Model."
      },
      "function_kwargs": {},
      "description": "Locate the 'nodes dictionary' file needed to identify city names for linking to hydrogen nodes.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', find the most relevant nodes dictionary file for hydrogen node mapping.",
      "on_error": "abort"
    },
    {
      "task_name": "read_nodes_dictionary_for_h2_links",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read and extract city names and corresponding hydrogen node identifiers from the located 'nodes dictionary' file.",
        "context": "Use the file path returned by the previous task to load the correct nodes dictionary.",
        "action": "read"
      },
      "function_kwargs": {
        "input_location": "",
        "output_location": ""
      },
      "description": "Read the located 'nodes dictionary' file to retrieve city names and hydrogen node mappings for linkage.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', parse city-to-hydrogen-node mapping entries for subsequent pipeline creation.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipelines_linking_kerosene_import_to_h2_nodes",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Pipeline object(s) to connect the 'e-kerosene import' Gas Node to the relevant Hydrogen Node(s) using the nodes dictionary and search results. Use a naming convention like 'e-kerosene import -> {HydrogenNode}'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select Category: Gas Pipeline; Model: TJ Sectoral Model; From-Node: 'e-kerosene import' (Gas Node); To-Node: matched Hydrogen Node(s) from the nodes dictionary.",
      "on_error": "abort"
    },
    {
      "task_name": "set_pipeline_capacity_from_import_terminal_data",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the Capacity property of the created pipeline object(s) to match the discovered import terminal capacities, including seasonal capacity details if available.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the created Gas Pipeline object(s) and set the 'Capacity' property (and any seasonal capacity properties or series) from the search results.",
      "on_error": "abort"
    }
  ]
}