{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the NUTS regions e-highway file in the nodes and lines folder. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "gas",
    "nodes",
    "fields",
    "pipeline",
    "web-search",
    "file",
    "TJ Sectoral Model"
  ],
  "date_created": "2025-08-22",
  "time_created": "12:38:17",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_name": "create_gas_node_e_kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a Gas Node object named 'e-kerosene import' to the TJ Sectoral Model in the Gas category.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas category Node object within the TJ Sectoral Model named 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_node_e_methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a Gas Node object named 'e-methanol import' to the TJ Sectoral Model in the Gas category.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas category Node object within the TJ Sectoral Model named 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e_kerosene_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a Gas Field object named 'e-kerosene import' to the TJ Sectoral Model in the Gas category.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas category Field object within the TJ Sectoral Model named 'e-kerosene import'.",
      "on_error": "abort"
    },
    {
      "task_name": "create_gas_field_e_methanol_import",
      "pipeline_name": "crud_pipeline.json",
      "description": "Add a Gas Field object named 'e-methanol import' to the TJ Sectoral Model in the Gas category.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas category Field object within the TJ Sectoral Model named 'e-methanol import'.",
      "on_error": "abort"
    },
    {
      "task_name": "search_import_terminals_kerosene_methanol_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "Europe ship import terminals kerosene OR synthetic kerosene OR e-kerosene and methanol; annual capacity (Mt/yr, t/yr) and any seasonal capacity constraints; include port/city names for mapping to hydrogen nodes"
      },
      "function_kwargs": {},
      "description": "Search the web for European ship import terminals for kerosene and methanol, including yearly and seasonal capacities and the associated city/port names.",
      "target_level": "attribute",
      "strategy_action": "read",
      "entity_selection_context": "Use the user's request to gather terminal names, cities, annual capacities, and any seasonal capacity information for kerosene and methanol imports into Europe.",
      "on_error": "log_and_continue"
    },
    {
      "task_name": "find_nuts_regions_file",
      "function_name": "find_file",
      "function_args": {
        "user_input": "Locate the 'NUTS regions e-highway' file within the 'nodes and lines' folder of the project/model directory."
      },
      "function_kwargs": {},
      "description": "Locate the 'NUTS regions e-highway' file in the 'nodes and lines' folder.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Identify the exact path of the requested file so it can be read to extract city names for mapping to hydrogen nodes.",
      "on_error": "abort"
    },
    {
      "task_name": "read_nuts_regions_extract_cities",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read the 'NUTS regions e-highway' file and extract the list of city names (and any associated codes) needed to link to hydrogen nodes.",
        "context": "Hydrogen node naming/mapping conventions; derive city names or identifiers suitable for selecting the correct hydrogen node.",
        "action": "read"
      },
      "function_kwargs": {
        "input_location": "",
        "output_location": ""
      },
      "description": "Read the located 'NUTS regions e-highway' file to extract city names for linking to hydrogen nodes.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Use the file found in the previous step to extract city names required for establishing links to hydrogen nodes.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_e_kerosene_to_h2_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-kerosene import' Gas Node to the relevant hydrogen node, using the city identified from the NUTS regions file.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request and outputs from search and file read, select the appropriate hydrogen node (by city) and create a Pipeline object linking from 'e-kerosene import' node to that hydrogen node.",
      "on_error": "abort"
    },
    {
      "task_name": "create_pipeline_e_methanol_to_h2_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-methanol import' Gas Node to the relevant hydrogen node, using the city identified from the NUTS regions file.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request and outputs from search and file read, select the appropriate hydrogen node (by city) and create a Pipeline object linking from 'e-methanol import' node to that hydrogen node.",
      "on_error": "abort"
    },
    {
      "task_name": "update_capacity_pipeline_e_kerosene",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the Capacity property of the 'e-kerosene import' pipeline to match the identified import terminal annual capacity, applying any seasonal capacity factors if available.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Pipeline object created for 'e-kerosene import' and update its Capacity property using the terminal capacity identified in the web search (and seasonal adjustments if found).",
      "on_error": "abort"
    },
    {
      "task_name": "update_capacity_pipeline_e_methanol",
      "pipeline_name": "crud_pipeline.json",
      "description": "Set the Capacity property of the 'e-methanol import' pipeline to match the identified import terminal annual capacity, applying any seasonal capacity factors if available.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Select the Pipeline object created for 'e-methanol import' and update its Capacity property using the terminal capacity identified in the web search (and seasonal adjustments if found).",
      "on_error": "abort"
    }
  ]
}