{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the NUTS regions e-highway file in the nodes and lines folder. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "Dante",
  "tags": [
    "crud",
    "create",
    "gas_nodes",
    "gas_fields",
    "google_search",
    "llm",
    "file_operations",
    "pipeline",
    "update"
  ],
  "date_created": "2025-09-30",
  "time_created": "23:59:05",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_id": 0,
      "task_name": "crud_create_gas_nodes",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create two Gas Node objects in the TJ Sectoral Model named 'e-kerosene import' and 'e-methanol import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "dependencies": [],
      "on_error": "abort"
    },
    {
      "task_id": 1,
      "task_name": "crud_create_gas_fields",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create two Gas Field objects in the TJ Sectoral Model named 'e-kerosene import' and 'e-methanol import'.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate {entity_type} from the following list.",
      "dependencies": [
        "crud_create_gas_nodes"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 2,
      "task_name": "google_search_import_terminals",
      "function_name": "google_search",
      "function_args": {
        "query": "European ship import terminals for kerosene and methanol, including annual capacities and seasonal capacity information."
      },
      "function_kwargs": {},
      "description": "Use google_search to find European ship import terminals for kerosene and methanol, including annual capacities and any seasonal capacity information.",
      "target_level": "n/a",
      "strategy_action": "read",
      "entity_selection_context": "Based on the search query, retrieve relevant information about import terminals.",
      "dependencies": [],
      "on_error": "log_and_continue"
    },
    {
      "task_id": 3,
      "task_name": "llm_extract_terminal_capacities",
      "function_name": "run_open_ai_ns",
      "function_args": {
        "prompt": "Extract terminal locations (city), annual capacities, and seasonal capacities from the following web search results. Structure the output as a JSON array of objects, each with keys: 'terminal_name', 'city', 'product' (kerosene/methanol), 'annual_capacity', 'seasonal_capacity' (if available).",
        "context": "{{dependencies.google_search_import_terminals.output}}",
        "model": "gpt-4"
      },
      "function_kwargs": {},
      "description": "Use run_open_ai_ns to extract and structure terminal locations (city) and annual/seasonal capacities from the web search results.",
      "target_level": "n/a",
      "strategy_action": "create",
      "entity_selection_context": "Process the web search results to extract key terminal information using LLM.",
      "dependencies": [
        "google_search_import_terminals"
      ],
      "on_error": "log_and_continue"
    },
    {
      "task_id": 4,
      "task_name": "find_nuts_e_highway_file",
      "function_name": "find_file",
      "function_args": {
        "user_input": "'NUTS regions e-highway' file within the nodes and lines folder"
      },
      "function_kwargs": {},
      "description": "Use find_file to locate the 'NUTS regions e-highway' file within the nodes and lines folder.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Locate the specified file based on the user's description.",
      "dependencies": [],
      "on_error": "abort"
    },
    {
      "task_id": 5,
      "task_name": "read_nuts_e_highway_file",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read the NUTS regions e-highway file to get city names needed for linking to hydrogen nodes.",
        "context": "{{dependencies.find_nuts_e_highway_file.output}}",
        "action": "read",
        "input_file_path": "{{dependencies.find_nuts_e_highway_file.output.file_path}}"
      },
      "function_kwargs": {},
      "description": "Use perform_file_crud with action 'read' on the located NUTS regions e-highway file to obtain city names needed for linking to hydrogen nodes.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Read the content of the located NUTS e-highway file.",
      "dependencies": [
        "find_nuts_e_highway_file"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 6,
      "task_name": "crud_create_kerosene_pipelines",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to create Pipeline objects linking the e-kerosene import node to the relevant hydrogen node(s). Do not add memberships explicitly.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the extracted terminal locations and NUTS region data, create Pipeline objects to link e-kerosene import nodes to corresponding hydrogen nodes.",
      "dependencies": [
        "crud_create_gas_nodes",
        "llm_extract_terminal_capacities",
        "read_nuts_e_highway_file"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 7,
      "task_name": "crud_update_pipeline_capacity",
      "pipeline_name": "crud_pipeline.json",
      "description": "Use crud_pipeline.json to update the Capacity property of the created kerosene Pipeline objects to match the corresponding import terminal capacities.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Update the Capacity property of the newly created kerosene Pipeline objects using the capacities extracted from terminal information.",
      "dependencies": [
        "crud_create_kerosene_pipelines",
        "llm_extract_terminal_capacities"
      ],
      "on_error": "abort"
    }
  ]
}