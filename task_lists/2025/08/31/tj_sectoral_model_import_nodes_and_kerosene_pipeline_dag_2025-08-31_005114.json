{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the nodes dictionary. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "TJ Assistant",
  "tags": [
    "crud",
    "object",
    "create",
    "gas",
    "nodes",
    "fields",
    "pipelines",
    "web-search",
    "file-read",
    "property-update"
  ],
  "date_created": "2025-08-22",
  "time_created": "00:52:14",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the TJ Sectoral Model specifications. Prioritize using PLEXOS CRUD pipelines for model interactions and functions for external data searches and file operations.",
  "tasks": [
    {
      "task_id": 0,
      "task_name": "create_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate object from the following list.",
      "on_error": "abort",
      "dependencies": []
    },
    {
      "task_id": 1,
      "task_name": "create_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate object from the following list.",
      "on_error": "abort",
      "dependencies": []
    },
    {
      "task_id": 2,
      "task_name": "create_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate object from the following list.",
      "on_error": "abort",
      "dependencies": []
    },
    {
      "task_id": 3,
      "task_name": "create_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a new Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate object from the following list.",
      "on_error": "abort",
      "dependencies": []
    },
    {
      "task_id": 4,
      "task_name": "google_search",
      "function_name": "google_search",
      "function_args": {
        "query": "European kerosene and methanol marine import terminals by ship with yearly capacities and seasonal capacity information, include terminal city names"
      },
      "function_kwargs": {},
      "description": "Search the web for European kerosene and methanol marine import terminals, including yearly capacities and any seasonal capacity information.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate resource from the following list.",
      "on_error": "log_and_continue",
      "dependencies": []

    },
    {
      "task_id": 5,
      "task_name": "find_file",
      "function_name": "find_file",
      "function_args": {},
      "function_kwargs": {},
      "description": "Read the file that compares the NUTS2 regions with Ehighway nodes. The filename contains both NUTS and ehighway",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate file from the following list.",
      "on_error": "abort",
      "dependencies": []
    },
    {
      "task_id": 6,
      "task_name": "perform_file_crud",
      "function_name": "perform_file_crud",
      "function_args": {
        "action": "read",
        "input_data": null,
        "input_location": "",
        "output_location": "",
        "output_structure": "json",
        "output_extension": "json",
        "user_request": "Read the file and return a mapping of hydrogen node names to their associated city names.",
        "ai_context": "Use the TJ Sectoral Model nodes dictionary located in the previous step to extract hydrogen node names and city information."
                        },
      "function_kwargs": {},
      "description": "Read the file from step 5 to extract hydrogen node names and associated city information.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate file from the following list.",
      "on_error": "abort",
      "dependencies": [5]
    },
    {
      "task_id": 7,
      "task_name": "create_object",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create GasPipeline objects linking the 'e-kerosene import' Gas Node to the relevant hydrogen nodes based on the city mapping.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate object from the following list.",
      "on_error": "abort",
      "dependencies": [4, 6]
    },
    {
      "task_id": 8,
      "task_name": "update_property",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the Capacity properties of the created kerosene import pipeline to match the identified import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', select the most appropriate property from the following list.",
      "on_error": "abort",
      "dependencies": [4]
    }
  ]
}