{
  "user_input": "Modify the TJ Sectoral Model. Add 2 new Gas Nodes 1 called 'e-kerosene import' and the other 'e-methanol import'. Add 2 new Gas Fields 1 called 'e-kerosene import' and the other 'e-methanol import'. Perform a web search/LLM call to find import terminals for kerosene and methanol into Europe by ship and yearly capacity including any information on seasonal capacities. Ensure we have the city name so we can link them to the hydrogen nodes by locating and reading the NUTS regions e-highway file in the nodes and lines folder. Create pipelines to link the kerosene import nodes to the relevant hydrogen node. Make the capacity of the pipelines match the import terminal capacities.",
  "author": "AI Assistant",
  "tags": [
    "plexos",
    "crud",
    "create",
    "update",
    "gas",
    "nodes",
    "fields",
    "pipelines",
    "web_search",
    "file_operations"
  ],
  "date_created": "2025-10-01",
  "time_created": "00:09:07",
  "retry_policy": {
    "count": 1,
    "strategy": "fixed"
  },
  "default_llm_context": "Perform the specified operation based on the user's input and the Terajoule Model specifications.",
  "tasks": [
    {
      "task_id": 0,
      "task_name": "create_e_kerosene_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas Node object named 'e-kerosene import' in the TJ Sectoral Model.",
      "dependencies": [],
      "on_error": "abort"
    },
    {
      "task_id": 1,
      "task_name": "create_e_methanol_gas_node",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas Node object named 'e-methanol import' in the TJ Sectoral Model.",
      "dependencies": [
        "create_e_kerosene_gas_node"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 2,
      "task_name": "create_e_kerosene_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas Field object named 'e-kerosene import' in the TJ Sectoral Model.",
      "dependencies": [],
      "on_error": "abort"
    },
    {
      "task_id": 3,
      "task_name": "create_e_methanol_gas_field",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Gas Field object named 'e-methanol import' in the TJ Sectoral Model.",
      "dependencies": [
        "create_e_kerosene_gas_field"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 4,
      "task_name": "search_import_terminals_europe",
      "function_name": "google_search",
      "function_args": {
        "query": "import terminals Europe by ship for kerosene and methanol yearly seasonal capacities city names"
      },
      "function_kwargs": {},
      "description": "Search for import terminals into Europe by ship for kerosene and methanol, including yearly and seasonal capacities and city names.",
      "target_level": "data",
      "strategy_action": "read",
      "entity_selection_context": "Perform a web search to gather information on import terminals for kerosene and methanol in Europe by ship.",
      "dependencies": [],
      "on_error": "log_and_continue"
    },
    {
      "task_id": 5,
      "task_name": "locate_nuts_regions_e_highway_file",
      "function_name": "find_file",
      "function_args": {
        "user_input": "'NUTS regions e-highway' file in the 'nodes and lines' folder"
      },
      "function_kwargs": {},
      "description": "Locate the 'NUTS regions e-highway' file in the 'nodes and lines' folder.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Locate the specified file to identify relevant hydrogen nodes for linking.",
      "dependencies": [],
      "on_error": "abort"
    },
    {
      "task_id": 6,
      "task_name": "read_nuts_regions_e_highway_file",
      "function_name": "perform_file_crud",
      "function_args": {
        "user_input": "Read the contents of the 'NUTS regions e-highway' file.",
        "context": "File located by 'locate_nuts_regions_e_highway_file' task.",
        "action": "read",
        "input_file_path": "{locate_nuts_regions_e_highway_file.output.file_path}"
      },
      "function_kwargs": {},
      "description": "Read the located 'NUTS regions e-highway' file.",
      "target_level": "file",
      "strategy_action": "read",
      "entity_selection_context": "Read the contents of the 'NUTS regions e-highway' file to extract city names and link to hydrogen nodes.",
      "dependencies": [
        "locate_nuts_regions_e_highway_file"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 7,
      "task_name": "create_e_kerosene_import_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-kerosene import' node to the relevant hydrogen node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Pipeline object linking the 'e-kerosene import' node to a relevant hydrogen node identified from search results and NUTS regions.",
      "dependencies": [
        "create_e_kerosene_gas_node",
        "search_import_terminals_europe",
        "read_nuts_regions_e_highway_file"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 8,
      "task_name": "create_e_methanol_import_pipeline",
      "pipeline_name": "crud_pipeline.json",
      "description": "Create a Pipeline object to link the 'e-methanol import' node to the relevant hydrogen node.",
      "target_level": "object",
      "strategy_action": "create",
      "entity_selection_context": "Based on the user's request: '{user_input}', create a Pipeline object linking the 'e-methanol import' node to a relevant hydrogen node identified from search results and NUTS regions.",
      "dependencies": [
        "create_e_methanol_gas_node",
        "search_import_terminals_europe",
        "read_nuts_regions_e_highway_file"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 9,
      "task_name": "update_e_kerosene_pipeline_capacity",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the capacity property of the 'e-kerosene import' Pipeline to match the import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', update the capacity property of the 'e-kerosene import' Pipeline using the import terminal capacity found in the web search.",
      "dependencies": [
        "create_e_kerosene_import_pipeline",
        "search_import_terminals_europe"
      ],
      "on_error": "abort"
    },
    {
      "task_id": 10,
      "task_name": "update_e_methanol_pipeline_capacity",
      "pipeline_name": "crud_pipeline.json",
      "description": "Update the capacity property of the 'e-methanol import' Pipeline to match the import terminal capacity.",
      "target_level": "property",
      "strategy_action": "update",
      "entity_selection_context": "Based on the user's request: '{user_input}', update the capacity property of the 'e-methanol import' Pipeline using the import terminal capacity found in the web search.",
      "dependencies": [
        "create_e_methanol_import_pipeline",
        "search_import_terminals_europe"
      ],
      "on_error": "abort"
    }
  ]
}